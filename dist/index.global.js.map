{"version":3,"sources":["../src/nodes/GuidPluginNode.ts","../src/index.ts"],"sourcesContent":["// **** IMPORTANT ****\n// Make sure you do `import type` and do not pull in the entire Rivet core library here.\n// Export a function that takes in a Rivet object, and you can access rivet library functionality\n// from there.\nimport type {\n  ChartNode,\n  EditorDefinition,\n  Inputs,\n  InternalProcessContext,\n  NodeBodySpec,\n  NodeConnection,\n  NodeId,\n  NodeInputDefinition,\n  NodeOutputDefinition,\n  NodeUIData,\n  Outputs,\n  PluginNodeImpl,\n  PortId,\n  Project,\n  Rivet,\n} from \"@ironclad/rivet-core\";\n\n// This defines your new type of node.\nexport type GuidPluginNode = ChartNode<\"guidPlugin\", GuidPluginNodeData>;\n\n// This defines the data that your new node will store.\nexport type GuidPluginNodeData = {\n  guid: string;\n  uppercase: boolean;\n  useUppercase?: boolean;\n  version: string;\n};\n\n// Make sure you export functions that take in the Rivet library, so that you do not\n// import the entire Rivet core library in your plugin.\nexport function guidPluginNode(rivet: typeof Rivet) {\n  const GuidPluginNodeImpl: PluginNodeImpl<GuidPluginNode> = {\n    create(): GuidPluginNode {\n      const node: GuidPluginNode = {\n        id: rivet.newId<NodeId>(),\n        data: {\n          guid: \"\",\n          uppercase: false,\n          version: \"v4\",\n        },\n        title: \"GUID\",\n        type: \"guidPlugin\",\n        visualData: {\n          x: 0,\n          y: 0,\n          width: 200,\n        },\n      };\n      return node;\n    },\n\n    // This function should return all input ports for your node, given its data, connections, all other nodes, and the project. The\n    // connection, nodes, and project are for advanced use-cases and can usually be ignored.\n    getInputDefinitions(\n      data: GuidPluginNodeData,\n      _connections: NodeConnection[],\n      _nodes: Record<NodeId, ChartNode>,\n      _project: Project,\n    ): NodeInputDefinition[] {\n      const inputs: NodeInputDefinition[] = [];\n\n      if (data.useUppercase) {\n        inputs.push({\n          id: \"uppercase\" as PortId,\n          dataType: \"boolean\",\n          title: \"Uppercase\",\n        });\n      }\n\n      return inputs;\n    },\n\n    // This function should return all output ports for your node, given its data, connections, all other nodes, and the project. The\n    // connection, nodes, and project are for advanced use-cases and can usually be ignored.\n    getOutputDefinitions(\n      _data: GuidPluginNodeData,\n      _connections: NodeConnection[],\n      _nodes: Record<NodeId, ChartNode>,\n      _project: Project,\n    ): NodeOutputDefinition[] {\n      return [\n        {\n          id: \"guid\" as PortId,\n          dataType: \"string\",\n          title: \"GUID\",\n        },\n      ];\n    },\n\n    // This returns UI information for your node, such as how it appears in the context menu.\n    getUIData(): NodeUIData {\n      return {\n        contextMenuTitle: \"GUID\",\n        group: \"Text\",\n        infoBoxBody:\n          \"Output a version 1 (date-time and MAC address) or 4 (random) GUID.\",\n        infoBoxTitle: \"GUID Plugin\",\n      };\n    },\n\n    // This function defines all editors that appear when you edit your node.\n    getEditors(_data: GuidPluginNodeData): EditorDefinition<GuidPluginNode>[] {\n      return [\n        {\n          type: \"toggle\",\n          dataKey: \"uppercase\",\n          useInputToggleDataKey: \"useUppercase\",\n          label: \"Uppercase\",\n        },\n        {\n          type: \"dropdown\",\n          dataKey: \"version\",\n          label: \"Version\",\n          options: [\n            { value: \"v1\", label: \"Version 1 (date-time and MAC address)\" },\n            { value: \"v4\", label: \"Version 4 (random)\" },\n            { value: \"v7\", label: \"Version 7 (epoch)\" },\n          ],\n        },\n      ];\n    },\n\n    // This function returns the body of the node when it is rendered on the graph. You should show\n    // what the current data of the node is in some way that is useful at a glance.\n    getBody(\n      data: GuidPluginNodeData,\n    ): string | NodeBodySpec | NodeBodySpec[] | undefined {\n      return rivet.dedent`\n        GUID\n        Version: ${data.version}\n        Uppercase: ${data.useUppercase ? \"(Using Input)\" : data.uppercase}\n      `;\n    },\n\n    // This is the main processing function for your node. It can do whatever you like, but it must return\n    // a valid Outputs object, which is a map of port IDs to DataValue objects. The return value of this function\n    // must also correspond to the output definitions you defined in the getOutputDefinitions function.\n    async process(\n      data: GuidPluginNodeData,\n      inputData: Inputs,\n      _context: InternalProcessContext,\n    ): Promise<Outputs> {\n      const ver = rivet.getInputOrData(data, inputData, \"version\", \"string\");\n      const upper = rivet.getInputOrData(\n        data,\n        inputData,\n        \"uppercase\",\n        \"boolean\",\n      );\n      if (ver === \"v1\") {\n        const guid = generateUUIDv1();\n        if (upper) {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid.toUpperCase(),\n            },\n          };\n        } else {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid,\n            },\n          };\n        }\n      } else if (ver === \"v4\") {\n        const guid = generateUUIDv4();\n        if (upper) {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid.toUpperCase(),\n            },\n          };\n        } else {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid,\n            },\n          };\n        }\n      } else {\n        const guid = generateUUIDv7();\n        if (upper) {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid.toUpperCase(),\n            },\n          };\n        } else {\n          return {\n            [\"guid\" as PortId]: {\n              type: \"string\",\n              value: guid,\n            },\n          };\n        }\n      }\n    },\n  };\n\n  // Once a node is defined, you must pass it to rivet.pluginNodeDefinition, which will return a valid\n  // PluginNodeDefinition object.\n  const guidPluginNode = rivet.pluginNodeDefinition(\n    GuidPluginNodeImpl,\n    \"Create GUID\",\n  );\n\n  // This definition should then be used in the `register` function of your plugin definition.\n  return guidPluginNode;\n}\n\nfunction generateUUIDv1(): string {\n  const timestamp = Date.now();\n  const machineIdentifier = Math.floor(Math.random() * 0xffffff);\n  return `${timestamp}-${machineIdentifier}-1xxx-yxxx-xxxxxxxxxxxx`.replace(\n    /[xy]/g,\n    function (c) {\n      var r = (Math.random() * 16) | 0,\n        v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    },\n  );\n}\n\nfunction generateUUIDv4(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n// Helper function to convert a number to a hexadecimal string with padding\nfunction toHex(number: number, length: number): string {\n  return number.toString(16).padStart(length, \"0\");\n}\n\nfunction stringToBytes(str: string): Buffer {\n  return Buffer.from(str, \"utf-8\");\n}\n\n// Helper function to convert a big-endian byte array to a hex string\nfunction beByteArrayToHexString(bytes: Uint8Array): string {\n  return Array.from(bytes)\n    .map((byte) => toHex(byte, 2))\n    .join(\"\");\n}\n\n// Helper function to set the version and variant bits\nfunction setVersionAndVariant(u: Uint8Array): void {\n  u[8] = 0x80 | (u[8] & 0x3f); // set variant field, top two bits are 1, 0\n  u[6] = 0x70 | (u[6] & 0x0f); // set version field, top four bits are 0, 1, 1, 1\n}\n\n// Function to generate one UUIDv7\nfunction generateUUIDv7(): string {\n  const u = new Uint8Array(16);\n  const now = Date.now();\n\n  // Fill everything after the timestamp with random bytes\n  stringToBytes(generateUUIDv4()).copy(u, 6);\n\n  // Shift time into first 48 bits and OR into place\n  const timeHigh = Math.floor(now / 0x100000000);\n  const timeLow = now % 0x100000000;\n\n  u[0] = (timeHigh >> 8) & 0xff;\n  u[1] = timeHigh & 0xff;\n  u[2] = (timeLow >> 24) & 0xff;\n  u[3] = (timeLow >> 16) & 0xff;\n  u[4] = (timeLow >> 8) & 0xff;\n  u[5] = timeLow & 0xff;\n\n  setVersionAndVariant(u);\n\n  return beByteArrayToHexString(u);\n}\n","// It is important that you only import types from @ironclad/rivet-core, and not\n// any of the actual Rivet code. Rivet is passed into the initializer function as\n// a parameter, and you can use it to access any Rivet functionality you need.\nimport type { RivetPlugin, RivetPluginInitializer } from \"@ironclad/rivet-core\";\n\nimport { guidPluginNode } from \"./nodes/GuidPluginNode.js\";\n\n// A Rivet plugin must default export a plugin initializer function. This takes in the Rivet library as its\n// only parameter. This function must return a valid RivetPlugin object.\nconst plugin: RivetPluginInitializer = (rivet) => {\n  // Initialize any nodes in here in the same way, by passing them the Rivet library.\n  const guidNode = guidPluginNode(rivet);\n\n  // The plugin object is the definition for your plugin.\n  const tuesdayCrowdPlugin: RivetPlugin = {\n    // The ID of your plugin should be unique across all plugins.\n    id: \"tuesday-crowd-plugin\",\n\n    // The name of the plugin is what is displayed in the Rivet UI.\n    name: \"Tuesday Crowd Plugin\",\n\n    // Define all configuration settings in the configSpec object.\n    configSpec: {},\n\n    // Define any additional context menu groups your plugin adds here.\n    contextMenuGroups: [],\n\n    // Register any additional nodes your plugin adds here. This is passed a `register`\n    // function, which you can use to register your nodes.\n    register: (register) => {\n      register(guidNode);\n    },\n  };\n\n  // Make sure to return your plugin definition.\n  return tuesdayCrowdPlugin;\n};\n\n// Make sure to default export your plugin.\nexport default plugin;\n"],"mappings":"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","names":["guidPluginNode"]}